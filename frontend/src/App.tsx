// frontend/src/App.tsx
import { useState, useEffect, useCallback } from 'react';
import DataInputForm from './components/DataInputForm';
import DataTable from './components/DataTable';
import ResultsDisplay from './components/ResultsDisplay';
import TopMappingsDisplay from './components/TopMappingsDisplay';
import { fetchData, addDataEntry, deleteAllData, calculateResults } from './services/apiService';
import { VanEntry, CalculationResult } from './types';
import './styles/App.css'; // ƒê·∫£m b·∫£o file CSS ƒë∆∞·ª£c import

type Theme = 'light' | 'dark';

function App() {
    const [inputData, setInputData] = useState<VanEntry[]>([]);
    const [calculationResult, setCalculationResult] = useState<CalculationResult | null>(null);
    const [isLoading, setIsLoading] = useState(false); // Loading cho c√°c action (add, delete, calculate)
    const [isLoadingData, setIsLoadingData] = useState(true); // Loading ri√™ng cho vi·ªác t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
    const [error, setError] = useState<string | null>(null);
    const [isHistoryOpen, setIsHistoryOpen] = useState(true); 

    const [theme, setTheme] = useState<Theme>(() => {
        const savedTheme = localStorage.getItem('theme') as Theme | null;
        return savedTheme || (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    });

    useEffect(() => {
        document.body.className = theme === 'dark' ? 'dark-mode' : '';
        localStorage.setItem('theme', theme);
    }, [theme]);

    const toggleTheme = () => {
        setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));
    };

    const toggleHistoryTable = () => {
        setIsHistoryOpen(prev => !prev);
    };

    const loadInitialData = useCallback(async () => {
        setIsLoadingData(true);
        setError(null);
        try {
            const data = await fetchData();
            setInputData(data);
        } catch (err: any) {
            setError(`Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠: ${err.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
            console.error("Load initial data error:", err);
        } finally {
            setIsLoadingData(false);
        }
    }, []);

    useEffect(() => {
        loadInitialData();
    }, [loadInitialData]);

    const handleAddData = async (van_truoc: string, van_sau: string) => {
        setIsLoading(true); 
        setError(null);
        try {
            await addDataEntry(van_truoc, van_sau);
            await loadInitialData(); 
            // Optional: T·ª± ƒë·ªông t√≠nh to√°n l·∫°i sau khi th√™m d·ªØ li·ªáu m·ªõi n·∫øu c√≥ d·ªØ li·ªáu
            // if (inputData.length + 1 > 0) { // Ki·ªÉm tra ƒë·ªô d√†i m·ªõi (sau khi loadInitialData)
            //    const results = await calculateResults();
            //    setCalculationResult(results);
            // }
        } catch (err: any) {
            setError(`L·ªói khi th√™m d·ªØ li·ªáu: ${err.response?.data?.message || err.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
            console.error("Add data error:", err);
        } finally {
            setIsLoading(false);
        }
    };

    const handleDeleteAll = async () => {
        if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu l·ªãch s·ª≠ kh√¥ng? Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c.")) {
            setIsLoading(true); 
            setError(null);
            try {
                await deleteAllData();
                setInputData([]);
                setCalculationResult(null); // X√≥a k·∫øt qu·∫£ t√≠nh to√°n c≈©
            } catch (err: any) {
                setError(`L·ªói khi x√≥a d·ªØ li·ªáu: ${err.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
                console.error("Delete all data error:", err);
            } finally {
                setIsLoading(false);
            }
        }
    };

    const handleCalculate = async () => {
        if (inputData.length === 0 && !isLoadingData) { // ƒê·∫£m b·∫£o kh√¥ng ph·∫£i ƒëang load data ban ƒë·∫ßu
            alert("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t√≠nh to√°n. Vui l√≤ng th√™m d·ªØ li·ªáu tr∆∞·ªõc.");
            return;
        }
        setIsLoading(true); 
        setError(null);
        try {
            const results = await calculateResults();
            setCalculationResult(results);
            if (results.message && results.total_data_count === 0) {
                // X·ª≠ l√Ω th√¥ng b√°o t·ª´ backend n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t√≠nh (v√≠ d·ª•: hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng)
                console.log("Calculation message from backend:", results.message);
            }
        } catch (err: any) {
            const backendError = err.response?.data?.message;
            setError(`L·ªói trong qu√° tr√¨nh t√≠nh to√°n: ${backendError || err.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
            console.error("Calculate error:", err);
            setCalculationResult(null); // X√≥a k·∫øt qu·∫£ c≈© n·∫øu c√≥ l·ªói
        } finally {
            setIsLoading(false);
        }
    };
    
    const latestVanSau = inputData.length > 0 ? inputData[inputData.length - 1][1] : null;

    // Hi·ªÉn th·ªã loading to√†n trang ch·ªâ khi t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
    if (isLoadingData) {
        return <div className="loading-spinner full-page-spinner">ƒêang t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠...</div>;
    }

    return (
        <div className="container">
            <div className="theme-toggle-container">
                <button onClick={toggleTheme} className="theme-toggle-button" aria-label="Toggle theme">
                    {theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}
                </button>
            </div>
            
            {error && <p className="error-message">{error}</p>}
            
            <div className="main-content">
                <section className="data-management">
                    <DataInputForm 
                        onAddData={handleAddData}
                        onCalculate={handleCalculate}
                        onDeleteAll={handleDeleteAll}
                        isProcessing={isLoading} // Ch·ªâ truy·ªÅn `isLoading` cho form
                        hasData={inputData.length > 0}
                    />
                    <DataTable 
                        data={inputData} 
                        isOpen={isHistoryOpen}
                        onToggle={toggleHistoryTable}
                        latestVanSau={latestVanSau}
                    />
                </section>

                <section className="results-section">
                    {/* Hi·ªÉn th·ªã loading cho vi·ªác t√≠nh to√°n */}
                    {isLoading && !isLoadingData && <div className="loading-spinner">ƒêang ph√¢n t√≠ch k·∫øt qu·∫£...</div>}
                    
                    {/* Ch·ªâ hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu kh√¥ng loading v√† c√≥ calculationResult */}
                    {!isLoading && calculationResult && calculationResult.total_data_count > 0 && (
                        <>
                            <ResultsDisplay results={calculationResult} />
                            {calculationResult.top_mappings_details && calculationResult.top_mappings_details.length > 0 && (
                                <TopMappingsDisplay 
                                    topMappings={calculationResult.top_mappings_details}
                                    totalDataCount={calculationResult.total_data_count}
                                />
                            )}
                        </>
                    )}
                    {/* Hi·ªÉn th·ªã th√¥ng b√°o t·ª´ backend n·∫øu kh√¥ng c√≥ data ƒë·ªÉ t√≠nh */}
                    {!isLoading && calculationResult && calculationResult.message && calculationResult.total_data_count === 0 && (
                         <p className="info-message">{calculationResult.message}</p>
                    )}
                     {/* Th√¥ng b√°o khi ch∆∞a t√≠nh to√°n nh∆∞ng c√≥ data */}
                     {!isLoading && !calculationResult && !error && inputData.length > 0 && (
                        <p className="info-message">Nh·∫•n "T√≠nh To√°n" ƒë·ªÉ xem k·∫øt qu·∫£ ph√¢n t√≠ch.</p>
                    )}
                     {/* Th√¥ng b√°o khi ch∆∞a c√≥ data */}
                     {!isLoading && !calculationResult && !error && inputData.length === 0 && (
                        <p className="info-message">Vui l√≤ng th√™m d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ b·∫Øt ƒë·∫ßu.</p>
                    )}
                </section>
            </div>
            <footer>
                <p>M·ªôt s·∫£n ph·∫©m demo - Vui l√≤ng s·ª≠ d·ª•ng c√≥ tr√°ch nhi·ªám.</p>
            </footer>
        </div>
    );
}

export default App;